package org.example.org.example.lessons.lesson12.homework

import java.lang.reflect.Array


fun returnCharacteristics(numbers: List<Int>): String {
    return when {
        numbers.isEmpty() -> "Пусто"
        numbers.size < 5 -> "Короткая"
        numbers.first() == 0 -> "Стартовая"
        numbers.sum() > 10000 -> "Массивная"
        numbers.average() == 10.0 -> "Сбалансированная"
        numbers.joinToString("").length == 20 -> "Клейкая"
        numbers.maxOrNull() ?: Int.MIN_VALUE < -10 -> "Отрицательная"
        numbers.minOrNull() ?: Int.MAX_VALUE > 1000 -> "Положительная"
        numbers.contains(3) && numbers.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }
}

fun grades(grades: List<Int>): List<Int> {
    val gradesAbove60 = grades.filter { it >= 60 }
    val gradesSortedByAsc = gradesAbove60.sorted()
    val first3Grades = gradesSortedByAsc.take(3)
    return first3Grades
}

fun orderedList(orderedList: List<String>): Map<Char, List<String>> {
    return orderedList
        .map { it.lowercase() } // Приводим все слова к нижнему регистру
        .groupBy { it.first() } // Группируем по первой букве
}

fun average(list1: List<String>): String {
    val list2 = list1.map { it.length }
    val list3: Double = list2.average()
    return "The average of the numbers in the array is: $list3"

    }

fun groupByParity(numbers: List<Int>): Map<String, List<Int>> {
    return numbers
        .distinct() // Отбираем уникальные числа
        .sortedDescending() // Сортируем по убыванию
        .groupBy { if (it % 2 == 0) "четные" else "нечетные" } // Группируем по четности
}

fun findAgeGreaterThan(ages: List<Int?>, threshold: Int): Int? {
    return ages.firstOrNull { it != null && it > threshold }
}

fun main() {

//Задачи на приведение коллекции к значению


//Проверить, что размер коллекции больше 5 элементов.
    val a1 = listOf(1, 2, -3, 4, -6, 6, 7, 6, -9, 10, 27, 19)
    val a1Size = a1.size
    if (a1.size > 5) {
        println("Размер коллекции больше 5 элементов")
    } else {
        println("Размер коллекции больше 5 элементов")
    }

//Проверить, что коллекция пустая
    if (a1.isEmpty()) {
        println("Коллекция пуста")
    } else {
        println("В коллекции ${a1.size} значений")
    }
//Проверить, что коллекция не пустая
    if (a1.isNotEmpty()) {
        println("В коллекции ${a1.size} значений")
    } else {
        println("Коллекция пуста")
    }

//Взять элемент по индексу или создать значение если индекса не существует
    val a2 = a1.getOrElse(18) {100}
    println(a2)

//Собрать коллекцию в строку
    val a3 = a1.joinToString(" , ")
    println(a3)

//Посчитать сумму всех значений
    val a4 = a1.sum()
    println(a4)

//Посчитать среднее
    val a5 = a1.average()
    println(a5)

//Взять максимальное число
    val a6 = a1.maxOrNull()
    println(a6)

//Взять минимальное число
    val a7 = a1.minOrNull()
    println(a7)

//Взять первое число или null
    val a8 = a1.firstOrNull()
    println(a8)
//Проверить что коллекция содержит элемент
    if (a1.contains(10)) {
        println("В коллекции что-то нашлось")
    } else {
        println("В коллекции ничего не нашлось")
    }


//Задачи на обработку коллекций

//Отфильтровать коллекцию по диапазону 18-30
    val a9 = a1.filter {
        it in 18..30
    }
    println(a9)

//Выбрать числа, которые не делятся на 2 и 3 одновременно
    val a10 = mutableListOf<Int>()
    a1.forEach {
        val notDivided = it % 2 == 0 && it % 3 == 0
        if (!notDivided) {
            a10.add(it)
        }
    }
    println(a10)

//Очистить текстовую коллекцию от null элементов
    val a11 = mutableListOf("Печка", "Гречка", null, "Свечка", null, "Грелка", "Полька", "Пташка", "Сорочка")
    val a12 = a11.filterNotNull()
    println(a12)

//Преобразовать текстовую коллекцию в коллекцию длин слов
    val a13 = a12.map { it.length }
    println(a13)

//Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val a14 = a12.associate { it.reversed() to it.length }
    println(a14)

//Отсортировать список в алфавитном порядке
    val a15 = a12.sorted()
    println(a15)

//Взять первые 3 элемента списка
    val a16 = a1.take(3)
    println(a16)

//Распечатать квадраты элементов списка
    val a21 = a1.map { it * it }
    println(a21)

//Группировать список по первой букве слов
    val a17 = a12.groupBy { it.first() }
    println(a17)

//Очистить список от дублей
    val a18 = a1.distinct()
    println(a18)

//Отсортировать список по убыванию
    val a19 = a1.sortedDescending()
    println(a19)

//Взять последние 3 элемента списка
    val a20 = a12.takeLast(3)
    println(a20)


//Реши задачи ниже в отдельных функциях.

//Задача 24. Характеристика числовой коллекции

//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
//
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток

    println(returnCharacteristics(emptyList())) // Пусто
    println(returnCharacteristics(listOf(1, 2, 3))) // Короткая
    println(returnCharacteristics(listOf(0, 2, 3, 4, 5))) // Стартовая
    println(returnCharacteristics(listOf(1000, 2000, 3000, 4000, 5000))) // Массивная
    println(returnCharacteristics(listOf(10, 10, 10, 10, 10))) // Сбалансированная
    println(returnCharacteristics(listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0))) // Клейкая
    println(returnCharacteristics(listOf(-11, -12, -13, -14, -15))) // Отрицательная
    println(returnCharacteristics(listOf(1001, 1002, 1003, 1004, 1005, 1006))) // Положительная
    println(returnCharacteristics(listOf(1, 8, 12, 3, 14))) // Пи***тая
    println(returnCharacteristics(listOf(5, 4, 3, 2, 1, 0))) // Уникальная

//Задача 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся
// основой для следующего.
    println(grades(listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)))


//Задача 26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//
//Начальные значения: val list = listOf(
//"Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//)
//
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy

    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
        "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф",
        "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка",
        "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
        "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
        "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник",
        "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
        "Настольная лампа", "торшер", "Этажерка"
    )

    val groupedWords = orderedList(list)

    // Вывод результата
    for ((key, value) in groupedWords) {
        println("$key: $value")
    }
//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя
// знаками после запятой, используя функцию format и подходящий шаблон.
    val list1 = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы",
        "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф",
        "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка",
        "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска",
        "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
        "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник",
        "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
        "Настольная лампа", "торшер", "Этажерка"
    )

    val averageNumbers = average(list1)




//Задание 28: Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).

    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    val groupedNumbers = groupByParity(numbers)

    // Вывод результата
    for ((key, value) in groupedNumbers) {
        println("$key: $value")
    }

//Задание 29: Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.

    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    val threshold = 18

    val result = findAgeGreaterThan(ages, threshold)

    println(result)
}
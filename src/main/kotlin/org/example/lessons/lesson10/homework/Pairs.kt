package org.example.org.example.lessons.lesson10.homework

fun main() {
//Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
val a1: Map<Int, Int> = mapOf()

//Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
val a2: Map<Float, Double> = mapOf(1.01f to 1.1, 2.02f to 2.2, 3.03f to 3.3)
    println(a2)

//Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
val a3: MutableMap<Int, String> = mutableMapOf(8 to "котят", 4 to "урока")
    println(a3)

//Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
a3[6] = "сникерсов"
a3[1] = "дом"
a3[2] = "дерева"
    println(a3)

//Используя словарь из предыдущего задания, извлеките значение, используя ключ. Попробуй получить значение с ключом,
//которого в словаре нет.
val a4 = a3[8]
val a5 = a3[10]
    println(a5)

//Удалите определенный элемент из изменяемого словаря по его ключу.
a3.remove(6)
    println(a3)

//Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение.
//Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
val a6: Map<Double, Int> = mapOf(5.0 to 5, 4.0 to 2, 9.0 to 3, 6.0 to 0)
    for ((key, value) in a6) {
        if (value == 0) {
            println("Бесконечность")
        }
        else {
            println(key / value)
        }
    }


//Измените значение для существующего ключа в изменяемом словаре.
a3[2] = "тополя"
println(a3)


//Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
val a7: Map<Int, Int> = mapOf(1 to 2, 3 to 4, 5 to 6)
val a8: Map<Int, Int> = mapOf(7 to 8, 9 to 10, 11 to 12)
val a9: MutableMap<Int, Int> = mutableMapOf()
    for ((key, value) in a7) {
        a9[key] = value
    }
    for ((key, value) in a8) {
        a9[key] = value
    }
    println(a9)

//Создайте словарь, где ключами являются строки, а значениями - списки целых чисел. Добавьте несколько элементов
//в этот словарь.
    val a10: MutableMap<String, List<Int>> = mutableMapOf("считаем вместе" to listOf(1, 2, 3))
    a10["считаем отдельно"] = listOf(4, 5, 6)
    println(a10)


//Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк. Добавь данные в словарь.
val a11: MutableMap<Int, MutableSet<String>> = mutableMapOf(5 to mutableSetOf("пять", "five"))
    a11[5] = mutableSetOf("пять", "five", "5")
    println(a11)

//Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку.
//Распечатай полученное множество.
val a12: MutableMap<Int, MutableSet<String>> = mutableMapOf(1 to mutableSetOf("коржик", "молоко"))
var a13 = 1
    a12[a13]?.add("чай")
    println("Обновленный словарь: $a12")


//Создай словарь, где ключами будут пары чисел. Через перебор найди значение у которого пара будет содержать цифру 5
//в качестве первого или второго значения.
    val a14 = mapOf(
        Pair(1,5) to 11,
        Pair(2,3) to 23,
        Pair(4,5) to 45,
        Pair(8,9) to 89
    )
    for ((pair, value) in a14) {
        if (pair.first == 5 || pair.second == 5)
            println("key -> $pair, value -> $value")
    }
}

// ЗАДАЧА НА ПОДБОР ОПТИМАЛЬНОГО ТИПА ДЛЯ СЛОВАРЯ

//Словарь библиотека: Ключи - автор книги, значения - список книг --> mapOf \ mutableSetOf
//Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
// --> mapOf \ mutableSetOf
//Четвертьфинал: Ключи - названия спортивных команд, значения - списки игроков каждой команды
// --> mapOf \ mutableSetOf
//Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
// --> mapOf \ mutableSetOf
//Словарь путешественника: Ключи - страны, значения - словари из городов со списком интересных мест.
// --> mapOf \ mutableSetOf
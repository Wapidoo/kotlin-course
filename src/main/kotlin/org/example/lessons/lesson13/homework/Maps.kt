package org.example.org.example.lessons.lesson13.homework
fun main() {

//Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах.
// Определите среднее время выполнения теста
    val a1 = mapOf("Прогон1" to 10.00, "Прогон2" to 7.00, "Прогон3" to 15.00)
    val a2: Collection<Double> = a1.values
    val a3: Double = a2.sum() / 3
    println(a3)

//Имеется словарь с метаданными автоматизированных тестов, где ключи — это имена тестовых методов а значения -
// строка с метаданными. Выведите список всех тестовых методов.
    val a4 = mapOf("Метод1" to "Метаданные 1", "Метод2" to "Метаданные 2", "Метод3" to "Метаданные 3")
    for ((key, value) in a4) {
        println("Название метода: $key")
    }

//В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    val a5 = mutableMapOf("Прохождение1" to "Успешно", "Прохождение2" to "Неуспешно", "Прохождение3" to "Не пройдено")
    a5["Прохождение4"] = "Пройдено с ограничениями"
    println(a5)

//Посчитайте количество успешных тестов в словаре с результатами (ключ - название, значение -
// результат из passed, failed, skipped).
    val a6 = mapOf("Прохождение1" to "passed", "Прохождение2" to "failed", "Прохождение3" to "skipped")
    println(a6.count{ it.value == "passed"})

//Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен
// (ключ - название, значение - статус исправления).
    val a7 = mutableMapOf("Баг1" to "Не исправлен", "Баг2" to "Не исправлен", "Баг3" to "Исправлен")
    a7.remove("Баг3")
    println(a7)

//Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
// выведите сообщение о странице и статусе её проверки.
    val a8 = mapOf("https://ya.ru" to "Checked", "https://kotlin.ru" to "Not checked", "https://ok.ru" to "Checked")
    for ((key, value) in a8) {
        println("Страница: $key, Статус: $value")
    }

//Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.
    val a9 = mapOf("Service1" to 2, "Service2" to 1, "Service3" to 8, "Service4" to 3)
    println(a9.filter { it.value > 2 })

//В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в виде строки).
// Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
    val a10 = mapOf("/catalog" to "200", "/cabinet" to "200", "/storage" to "500", "/exit" to "404")
    println(a10.getOrElse("/catalog", {"Не протестировано"}))

//Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации, значение -
// сама конфигурация), получите значение для "browserType". Ответ не может быть null.
    val a11 = mapOf("browserType" to "google", "operationalSystem" to "Windows", "testEnvironment" to "stage")
    println(a11.getValue("browserType"))

//Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, добавив новую версию.
    val a12 = mapOf("version1" to "1.0.0", "version2" to "1.0.1", "version3" to "2.0.0")
    val a13 = a12 + ("version4" to "3.0.0")
    println(a13)

//Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства,
// значение - строка с настройками), получите настройки для конкретной модели или верните настройки по умолчанию.
    val a14 = mapOf("mi_9_Lite" to "Android10, wi-fi, 10% charged", "Iphone12" to "17.5.5, wi-fi, 18% charged", "Pixel_9" to "Android13, mobile network, 80% charged")
    println(a14.getOrElse("Iphone12", {"Android12, mobile network, 50% charged"}))

//Проверьте, содержит ли словарь с ошибками тестирования (ключ - код ошибки, значение - описание ошибки)
// определенный код ошибки.
    val a15 = mapOf("200" to "success", "400" to "bad request", "500" to "internal server error")
    println(a15.containsKey("500"))

//Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
// а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped"). Отфильтруйте словарь, оставив
// только те сценарии, идентификаторы которых соответствуют определённой версии тестов, то-есть в ключе
// содержится требуемая версия.
    val a16 = mapOf("KO001_12" to "Passed", "KO002_12" to "Failed", "KO001_14" to "Failed")
    println(a16.filterKeys { it.contains("12") })

//У вас есть словарь, где ключи — это названия функциональных модулей приложения, а значения — результаты их
// тестирования. Проверьте, есть ли модули с неудачным тестированием.
    val a17 = mapOf("Module1" to "Passed", "Module2" to "Failed", "Module4" to "Failed")
    println(a17.filterValues { it == "Failed" })

//Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
    val a18 = mutableMapOf("TestEnv1" to "dev1", "TestEnv2" to "dev2", "TestEnv4" to "dev4")
    a18.putAll(a16)
    println(a18)








//Объедините два неизменяемых словаря с данными о багах.

//Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.

//Исключите из отчета по автоматизированному тестированию те случаи, где тесты были пропущены (имеют статус “skipped”).
// Ключи - название теста, значения - статус.

//Создайте копию словаря с конфигурациями тестирования удалив из него несколько конфигураций.

//Создайте отчет о тестировании, преобразовав словарь с результатами тестирования (ключ — идентификатор теста,
// значение — результат) в список строк формата "Test ID: результат".

//Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.

//Преобразуйте словарь, содержащий числовой ID теста и данные о времени выполнения тестов, заменив идентификаторы
// тестов на их строковый аналог (например через toString()).

//Для словаря с оценками производительности различных версий приложения (ключи - строковая версия, значения -
// дробное число времени ответа сервера) увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.

//Проверьте, пуст ли словарь с ошибками компиляции тестов.

//Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.

//Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.

//Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.

//Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты, которые не прошли успешно и
// содержат в названии “optional”.

}